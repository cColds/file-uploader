<nav class="nav-sidebar">
  <div class="nav-actions">
    <button class="primary-btn" id="new-folder">New Folder</button>
    <button class="secondary-btn" id="new-file">New File</button>
  </div>

  <ul class="nav-list">
    <li class="nav-item <%= activePage === 'home' ? 'active' : '' %>">
      <a href="/">Home</a>
    </li>
    <li class="nav-item <%= activePage === 'my-files' ? 'active' : '' %>">
      <a href="/my-files">My Files</a>
    </li>
  </ul>
  <dialog id="file-dialog">
    <header class="modal-header">
      <h2>New File</h2>
      <button class="close-modal-btn" id="close-file-modal-btn">
        <span class="material-symbols-outlined close-icon"> close </span>
      </button>
    </header>
    <form
      action="/new-file"
      method="post"
      enctype="multipart/form-data"
      class="new-file-form-modal"
      id="file-form"
    >
      <div class="file-input-wrapper">
        <input
          type="file"
          class="file-area"
          name="file"
          id="file-input"
          required
        />
        <p
          class="error-message hidden file-error-message"
          id="file-error-message"
        >
          Failed to upload file
        </p>
      </div>

      <button type="submit" class="primary-btn upload-file-btn">
        Upload <span class="material-symbols-outlined"> upload </span>
      </button>
    </form>
  </dialog>

  <dialog id="folder-dialog">
    <header class="modal-header">
      <h2>New Folder</h2>
      <button class="close-modal-btn" id="close-folder-modal-btn">
        <span class="material-symbols-outlined close-icon"> close </span>
      </button>
    </header>
    <form
      action="/new-folder"
      method="post"
      class="new-folder-form-modal"
      id="folder-form"
    >
      <div class="folder-input-wrapper">
        <label for="folder-input">Folder Name</label>
        <input type="text" name="folder" id="folder-input" required />
        <p
          class="error-message hidden folder-error-message"
          id="folder-error-message"
        >
          Failed to create folder
        </p>
      </div>

      <button type="submit" class="primary-btn create-folder-btn">
        Create
        <span class="material-symbols-outlined"> create_new_folder </span>
      </button>
    </form>
  </dialog>
</nav>
<script defer>
  // todo: turn script into type module and move scripts there
  // so nav.ejs not messy
  document.addEventListener("DOMContentLoaded", () => {
    // new folder dom manipulation

    const newFolderModalBtn = document.querySelector("#new-folder");
    const folderDialog = document.querySelector("#folder-dialog");
    const closeFolderDialog = document.querySelector("#close-folder-modal-btn");
    const folderForm = document.querySelector("#folder-form");
    const folderInput = document.querySelector("#folder-input");
    const folderErrorMessage = document.querySelector("#folder-error-message");

    folderForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        const currentUrl = window.location.href;

        const url = new URL(currentUrl);
        const segments = url.pathname.split("/");

        const folderId = segments.pop();

        const isRootFolder =
          !segments.includes("my-files") || isNaN(Number(folderId));

        const endpoint = isRootFolder
          ? "/new-folder"
          : `/new-folder?folderId=${folderId}`;

        const res = await fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ folderName: folderInput.value }),
        });
        const result = await res.json();

        if (res.ok) {
          folderDialog.close();
          folderErrorMessage.classList.add("hidden");
          folderForm.reset();
          window.location.reload();
        } else {
          folderErrorMessage.classList.remove("hidden");
          folderErrorMessage.textContent = result.error;
        }
      } catch (err) {
        console.log("Something went wrong", err);
      }
    });

    newFolderModalBtn.addEventListener("click", () => {
      folderDialog.showModal();
      folderForm.reset();
      folderErrorMessage.classList.add("hidden");
    });

    closeFolderDialog.addEventListener("click", () => {
      folderDialog.close();
    });

    // new file dom manipulation

    const newFileModalBtn = document.querySelector("#new-file");
    const fileDialog = document.querySelector("#file-dialog");
    const closeFileDialog = document.querySelector("#close-file-modal-btn");
    const fileForm = document.querySelector("#file-form");
    const fileInput = document.querySelector("#file-input");
    const fileErrorMessage = document.querySelector("#file-error-message");

    fileForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        const formData = new FormData();
        formData.append("file", fileInput.files[0]);

        const currentUrl = window.location.href;

        const url = new URL(currentUrl);
        const segments = url.pathname.split("/");
        const folderId = segments.pop();

        const isRootFolder =
          !segments.includes("my-files") || isNaN(Number(folderId));

        const endpoint = isRootFolder
          ? "/new-file"
          : `/new-file?folderId=${folderId}`;

        const res = await fetch(endpoint, {
          method: "POST",
          body: formData,
        });
        const result = await res.json();

        if (res.ok) {
          fileDialog.close();
          fileErrorMessage.classList.add("hidden");
          fileForm.reset();
          window.location.reload();
        } else {
          fileErrorMessage.classList.remove("hidden");
          fileErrorMessage.textContent = result.error;
        }
      } catch (err) {
        console.log("Something went wrong", err);
      }
    });

    newFileModalBtn.addEventListener("click", (e) => {
      fileDialog.showModal();
      fileErrorMessage.classList.add("hidden");
      fileForm.reset();
    });
    closeFileDialog.addEventListener("click", (e) => {
      fileDialog.close();
    });
  });
</script>
